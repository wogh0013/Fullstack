트리 : 부모/자식 관점이 있어야 한다.
그래프에 대한 알고리즘이 최신 트렌드다.

이진트리 : 차수가 2인 트리다. (가지의 개수가 0, 1, 2인 트리)

이진탐색트리 배열을 이용한 이진 검색은 데이터 정렬을 따로 해야 돼서,
데이터가 변환이 많은 경우에는 정렬에 시간을 소요하기 때문에 이진 검색이 효율적이지 못하다.

이진탐색트리 : 데이터를 정렬하면서 집어넣는다.
               노드의 키값을 기준으로 작은 값 -> 왼쪽, 큰 값 -> 오른쪽으로 저장한다.
               
               
해쉬 - 해쉬값 : 특정개체를 유일하게 식별할 수 있는 값

데이터 -> 해쉬함수 -> 특정메모리로 맵핑되게 한다.
"school"  -> 2142142 -> 특정메모리로 가려면 %200, 0~199 사이에 머문다.
             해쉬함수()
              unicode % 200 -> 0~200      버킷
                  
                        0 -> school
                        1 -> desk
                        2 -> chair -> assembly
                        
               두 개 이상의 단어가 하나의 버킷을 가지고 싸운다면 -> 충돌
               충돌을 어떻게 해결할까 ? -> 배열의 구조 별도의 overflow 공간을 만든다.
               버킷숫자가 충분하지 않으면 선형회귀랑 비슷해진다.
               
               버킷의 숫자는 실제 처리할 데이터 개수의 1/2 ~ 1/3 이어야 한다.
               가급적 충돌이 안 일어나도록 해쉬함수를 잘 만들어야 한다.
               
링크드리스트 배열
1. 해쉬테이블 구성하기
2. 검색하기
               
               
               
      
      
      <<시험>>
               
1.  정수변수 선언 
2.  where is null  , is not null 
3.  테이블의 필드명 변경 
    alter table 테이블명 rename column 원래필드명 to 새로운필드명 
4. JDBC
    1)드라이버로딩 class.forname("클래스명");
    2)Connection 객체연결
    3)Statement나 PreparedStatement 객체를 만든다 
      Statement 객체의 경우  sql= "insert board( id, title) values( '" + id + "', '"+title+"' )";
      printf("%d ........)
      PreparedStatement     sql= "insert board( id, title) values( ?, ? )";
      나중에 파라미터라는 것을 만들어서 끼워넣기   
      변수가 들어갈 위치를 물음표를 주고 나중에 값을 끼워넣기 한다 
    4) 쿼리를 실행해서 결과를 ResultSet 으로 가져올 수 도 있고  (insert, update, delete)

    DML : Data Manipulation Language  (insert, update, delete)
    DDL : Data Definition Language( create, alter, drop, truncte)
    DCL : Data Controll Language (grant, revoke)
    
    5) 모든 객체를 close하고 종료한다 

    ublic class TestJDBC {
   //mysql-connector-java-8.0.27.jar 이 파일안에 
   //com.mysql.cj.jdbc.Driver 클래스가 존재한다 
   
   static final String JDBC_DRIVER = "com.mysql.cj.jdbc.Driver"; 
   //8.0 이상부터 allowPublicKeyRetrieval=true 필요함 
   static final String DB_URL = "jdbc:mysql://localhost:3306/mydb?allowPublicKeyRetrieval=true";
   // localhost - db아이피,  3306 포트번호  디비명 
   static final String USERNAME = "user01";  //계정만들기 
   static final String PASSWORD = "1234"; 
   
   public static void main(String[] args) {
      try
      {
         Class.forName(JDBC_DRIVER); //동적으로 클래스를 메모리로 로딩한다 
         System.out.println("드라이브 로딩 성공");
      }
      catch(ClassNotFoundException e)
      {
         e.printStackTrace();
      }
      
      //java.sql. ***
      Connection conn=null;
      PreparedStatement ptmt=null;
      ResultSet rs = null;
      try
      {
         conn = DriverManager.getConnection(DB_URL, USERNAME, PASSWORD);
         System.out.println("디비 연결 성공");
         
            String sql = "select * from board";
         ptmt = conn.prepareStatement(sql);
         rs = stmt.executeQuery(); //데이터를 디비로부터 가져온다.
         while(rs.next()) //rs.next - 다음에 읽어올 다른데이터가 있으면 true, 데이터가 있는 동안 
         {
            //컬럼이 1부터 존재한다 
            System.out.printf("%s %s %s\n", rs.getString(1), rs.getString(2), rs.getString(3));
         }
         rs.close()
            ptmt.close();
            conn.close();
      }
      catch(SQLException e)
      {
         e.printStackTrace();
      }
      catch(Exception e)
      {
         e.printStackTrace();
      }
   }   
}





- 모델링 : 현실세계를 데이터베이스로 옮기는 과정

- 테이블 생성
bookNo int AI PK - auto_increment, primary key, not null

create table 테이블명
(
    필드명 int not null auto_increment primary key,
    필드명 타입,
    필드명 타입
);

create table board(
   id int primary key not null auto_increment,
   title varchar(10),
   writer varchar(10),
   contents varchar(10),
   wdate date
);


-- ANSI(표준) 조인
select board_id, username, title
from board
inner join member on board.userid=member.userid;


select board_id, username, title
from board
join member on board.userid=member.userid;


--mysql, oracle
select board_id, username, title
from board, member
where board.userid=member.userid;



<알고리즘>

1. 순서도
  1) 둥근 사각형(단말, terminal) - 프로그램의 시작 or 종료
  2) 선 - 제어의 흐름, 제어가 흘러가는 방향
  3) 마름모(판단) - 조건에 따라 어디로 분기할지
  4) 순서도는 일을 처리하는 과정을 도표화시킴
  
2. 검색방법 
  1) 선형검색 : 데이터를 처음부터 차례대로 읽어서 원하는 값이 나올 때까지 검색
  2) 이분검색 : 데이터가 반드시 정렬돼있어야 함. 반씩 나누어서 찾기
  3) 해쉬검색 : 해쉬테이블 구성, 이론상 한 번에 검색

3. 큐
  1) 선입선출(FIFO, Fisrt In First Out)
  2) 버퍼, 큐 (은행창구에서 줄서서 기다리는 예제)
  3) rear쪽에서 put / front쪽에서 pop이 이루어진다.
    
4.
  int factorial(int limit)
  {
      if(limit==1)
          return 1;
      else
          return limit * factorial(limit-1);
  }
  
5. 이진검색트리 : 자기보다 작은 건 왼쪽 / 큰 건 오른쪽

6. 연결리스트에서 삽입, 삭제

7. 스택
  1) 후입선출(LIFO, Last In First Out)
  2) push, pop, top 인덱스를 통해서 작업한다.
  
8. 정렬
     void insertionSort()
   {
      int i, j;
      
      //처음에 0은 이미 정렬된거   0번방에서 1번방데이터가 들어갈 위치 찾고 나머지 땡기기 작업 
      for(i=1; i<nums.length; i++)
      {
         int temp=nums[i]; //위치 찾을 변수값을  temp에 저장함 
         //i번째 위치부터 0에 도달할때까지 
         j=i; 
         while(j>0 && temp < nums[j-1] ) {
            nums[j] = nums[j-1];//뒤로땡기고
            j--;
         }
         
         nums[j]=temp; //들어갈 위치에 삽입 
         display();
      }
      
   }

    void bubbleSort1()
   {
      System.out.println("정렬중 .....................................");
      for(int i=0; i<nums.length-1; i++)
      {
         for(int j=0; j< nums.length-1 -i; j++)
         {
            if( nums[j] > nums[j+1])
            {
               int temp = nums[j];
               nums[j] = nums[j+1];
               nums[j+1] = temp;
            }
         }
         System.out.printf("%3d 회: ", (i+1));
         display();
      }
      System.out.println("정렬완료 .....................................");
   }

    void selectSort1()
   {
      System.out.println("정렬중 .....................................");
      for(int i=0; i<nums.length-1; i++)
      {
         for(int j=i+1; j<nums.length; j++)
         {
            if(nums[i]>nums[j])
            {
               int temp = nums[i];
               nums[i] = nums[j];
               nums[j] = temp;
            }
         }
         System.out.printf("%3d 회: ", (i+1));
         display();
      }
      System.out.println("정렬완료 .....................................");
   }















 
         
