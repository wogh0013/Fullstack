//본래의 자바스크립트는 파일을 읽고 쓰기가 안 된다.
//웹을 통해서 바이러스를 심는 등 문제가 생겨서 보안상 하지 못 한다.
//nodejs는 서버를 만드는 언어다.

const fs = require("fs"); //파일 관련한 라이브러리를 불러오기

//동기식 파일 읽기, 파일을 모두 읽으면 읽어들인 파일의 내용을 반환한다.
//파일을 다 읽을 때까지 함수는 리턴하지 않는다.
//만일 파일의 크기가 커서 1GB쯤 된다면 오랜 시간 동안 아무것도 못하고 기다려야 한다.
var data = fs.readFileSync("./함수형언어1.html", 'utf-8');
console.log(data);
console.log("-----------------완료-----------------");


//비동기의 경우는 일의 시작시점과 종료시점이 달라서
//용량이 큰 파일을 읽거나 네트워크 작업 시 많이 사용된다. (시간이 많이 걸림)
//readFile - 시스템한테 파일을 읽어 바로 끝난다.
//첫 번째 인자 - 파일명
//두 번째 인자 - 인코딩
//세 번째 인자 - callback 함수, 파일을 다 읽고 나면 시스템이 호출한다.
//              호출자가 시스템이 함수에 전달될 매개변수는 정해져있다.
//              첫 번째 에러객체, 두 번째가 파일임

//1. 외부의 함수 - 처리할 일이 많을 때는 함수의 정의를 이용해 처리할 수도 있다.
function dataRead(err, data)
{
    console.log(data);
}
fs.readFile("./함수형언어1.html", 'utf-8', dataRead);

//2. 함수표현식 - 비교적 간단한 코드를 처리할 때 사용
fs.readFile("./함수형언어1.html", 'utf-8', function(err, data){
    console.log(data);
});
console.log("-----------------완료-----------------");

//3. 화살표 함수
fs.readFile("./함수형언어.html", 'utf-8', (err, data)=>{
    console.log(data);
});
console.log("-----------------완료-----------------");
