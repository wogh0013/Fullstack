1. 엄격한 타입체크를 하지 않는다.
   자바처럼 타입은 존재하지만, 변수를 선언할 때 타입을 선언하는 부분이 없다.
   변수에 저장되는 데이터는 타입이 존재한다.

   var a;   //변수 선언 시 키워드는 var 하나이다.
            //어떤 타입을 저장할지 지정할 필요가 없다.


2. 인터프리터 언어
   컴파일 언어는 처음부터 끝까지 번역을 해서 문법적 오류를 모두 찾아서 에러가 없어야 실행된다.
    └ 컴파일 에러 메시지가 다양해서 디버깅 속도가 빨라진다.

    스크립트 언어는 한 줄만 읽고 그 줄만 번역 -> 문제가 없으면 바로 실행
    -> 실행하다가 오류가 나면 멈춘다.
    -> 메시지가 왜 나오는지 잘 모른다. -> 디버깅 속도가 느리다.
    변수를 미리 선언하지 않고 사용 가능하다.
    대충 해도 돌아간다는 장점이 있다.
    교육용 언어로만 적합하다가 현재 python, nodejs 등 실무에 사용가능한 언어가 나오고 있다.

    브라우저에 있는 자바스크립트 엔진이 2008년에 독립
    -> v8 엔진이 독립을 해서 자바처럼 브라우저와 상관없는 일반적인 언어로 승격된다.(nodejs)
    -> nodejs라는 언어를 별도로 설치해야 한다.

    

- 정적 프로토타입 언어(컴파일러 언어) : 자바
    └ int a;      //컴파일 시간에 변수의 타입이 결정되고, 바뀌지 않는다.

- 동적 프로토타입 언어(인터프리터 언어) : 자바스크립트
    └ var a;      //a에 뭐가 들어갈지 모른다.
      a=10;       //수행 도중에 타입이 확정된다. -> 동적 프로토타입 언어









