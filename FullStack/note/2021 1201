객체지향의 성격
    추상성 - 클래스의 내부가 추상화돼서 외부사용자는 내부의 자세한 사항을 몰라도 사용이 가능한 성격을 말한다
             Scanner, ArrayList, String 등 실제로 내부에 어떤 데이터가 있고, 어떻게 작동되는지 몰라도
             사용에 지장이 없다. 추상화가 되면 될수록 사용자는 편하고 만드는 사람은 힘들다.
             
    은닉성(캡슐화) : 클래스 내부의 데이터를 보호하여 외부로부터 잘못된 값이 들어가지 않도록 한다.
             그래서 public, protected, private 의 접근권한을 만들었다.
             public : 누구나 사용가능한 접근 방법
             protected : 클래스 내부에서만 접근 가능, 상속 가능 
             private : 클래스 내부에서만 접근 가능
             - 보통 변수는 private이고, 함수는 public인데, 반드시 그러한 것은 아니다.
             
     상속성 : 기존에 만들어놓은 클래스를 이용해 새로 클래스를 정의할 수 있다.
              코드의 재사용성을 높이고, 프레임워크(미리 틀을 만들어놓은 프로그램) 등을 만들 때 사용하는 원리이다.
              
     다형성 : 이름이 같은데, 형태가 다른 성격을 다형성이라고 한다.
             overloading, overriding 두 가지가 있다.
             언어에 따라서 동일한 이름의 함수를 만들 수 없는 경우도 있다.
             overloading : 이름이 같은데 매개변수가 다른 함수를 만들 수 있다. (자바)
             overriding : 상속 관계에서 부모클래스에 있는 함수를 다시 정의(재정의)하는 것이다.
                          부모클래스에 있는 함수가 마음에 안 들면 다시 만들면 된다.
                          그러면 내 함수를 사용할 수 있고, 이것이 overriding이다.
                          자바의 모든 클래스는 Object 클래스의 자손이다.
                          
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
1. 1~10 중에서 컴퓨터가 숫자를 생각함
2. 5번 안에 맞혀야 함
3. 사람한테 숫자를 입력받음
4.  컴퓨터 == 사람 : 맞혔습니다
    컴퓨터  > 사람 : 더 큰 수를 입력하세요
    컴퓨터  < 사람 : 더 작은 수를 입력하세요
                              
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
class Game1{
    computer -> int
    person -> 배열 or ArrayList
    match -> boolean
    count -> 몇 번만에 맞혔는지
    게임함수();
}             

class GameMgr{
    ArrayList<Game1> list;
    doGame();
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
자바는 클래스가 이름 충돌이 발생할 수 있어 패키지를 만든다.
패키지에 속한 클래스 파일들의 첫 줄은 package ~로 시작해야 한다.

Src
 └ test1
     └ test1.java       test1이라는 패키지에 속하기 때문에
       test2.java       첫 줄에 package test1;

 └ test2 
     └ test1.java       package test2;

test1.test1     test2.test1 두 개의 클래스로 사용해야 한다.

패키지도 충돌이 날 수 있다.
자바에서는 패키지를 만들 때 회사 도메인이 있으면 도메인을 뒤집고
www.woori.computer
com.woori.game 
            └ 이 아래에 클래스를 둔다.
com
 └ woori
     └ game
     
     
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ     
<for each문>     
     
for(int i=0; i<list.size(); i++){
    NumberGame game = list.get(i);
}

for(클래스명 변수명 : 객체배열){

}

for(NumberGame game : list){

}     





