https://www.macs.hw.ac.uk/cs/java-swing-guidebook/?name=JButton&page=2



<시험>

1. 변수선언법

2. 
    1) 영문자, 숫자, _, $
    2) 숫자로 시작x
    3) 예약어는 변수로 사용x

    int if;     X
    int while;  X

    int If;     O // 예약어여도 대문자면 괜찮
    int if1;    O
    int while1; O

3. 생성자
    1) 변수 초기화
    2) 클래스명과 동일하게 만든다.
    3) 사용자가 생성자를 만들지 않으면, 기본 생성자를 만들어서 호출한다
    4) public이어야 한다.
    5) 반환형 사용불가
    6) 생성자를 직접 호출할 수 없다. -> 객체를 통해 호출 가능 new 클래스명();
    7) 생성자는 오버로딩 가능하다. (여러 개 생성 가능)
     └ 다형성 지원 (이름은 같으나, 함수의 매개변수가 다름
                   매개변수 타입 or 개수가 달라야 함
                   반환값으로는 구분이 안됨)

4. 자바 언어의 특징
    1) 객체지향언어
    2) 플랫폼 독립성 (os의 영향 x)
    3) 컴파일러 언어 - 실제 시작할 때 인터프리터가 작동된다.
    4) gc(garbage collector) : 자동 메모리 관리
        └ 생성자만 만들고, 소멸자는 안 만든다.
    5) 멀티스레드를 지원한다. 

5. 상속
    1) 하나만 상속받을 수 있다. (인터페이스는 여러 개 상속 가능)
    2) extends : 클래스와 추상클래스(상속)      ex) extends A;
    3) implements : interface (구현한다)       ex) implements A, B;

6. super() : 부모 생성자 호출
   this() : 동일 클래스 내에서 자기를 호출
   super로 호출하던 this로 호출하던, 앞에 다른 코드가 오면 에러가 난다.
    └ 함수(){
        this() 또는 super() // this()나 super()가 가장 앞에 와야 됨.
    }

7. 메서드 오버라이딩
    1) 부모클래스의 메서드와 똑같아야 한다.(이름, 파라미터 등)
    2) 부모클래스(public) -> 자식클래스(private)  x
       (접근 범위를 좁게 만들지 x)
       부모클래스(protected) -> 자식클래스(public)
       (같거나 올리는 것만 가능하다)
       
8. 접근권한 : public -> protected -> default -> private

9. ArrayList list = new ArrayList(); 저장되는 개체를 선택할 수 없어서, 타입 인정성이 떨어진다.
   String s = (String)list.get(0); 업캐스팅, 다운캐스팅 필요

   <제네릭>
   ArrayList<Book> list = new ArrayList<Book>(); 프로그램 시작 전에 타입이 확정적(컴파일 시간에)
    └ 컴파일 시간(정적 타입 확정) <-> 실행시간(동적 타입 확정)

10. 추상화, 은닉성(캡슐화), 다형성, 상속성.....

11. 인터페이스
    - 추상메서드로만 구성돼있음
    - 상수
    - 추상이 아닌 메서드나 변수를 가질 수 X
    - 객체 생성 못함 -> 상속받아서 상속받은 쪽에서 오버라이딩해야 함
    - 여러 개 상속 가능 implements (<->클래스는 한 개만 상속 가능 extends)

12. 클래스 구성 요소
    메서드, 변수, 생성자 ...

13. HashMap<String, String> map = new HashMAp<String, String>();

    map.put("red", "파란색");   
    map.put("red", "빨간색");   //해당키가 존재하지 않으면 만들지만, 존재하면 덮어쓴다.

    map.get("red"); -> 빨간색

14. 싱글톤
    1) 생성자 접근권한이 private 이어야 한다. (클래스명하고 똑같은 게 생성자), 앞에 void 도 못 쓴다.
    2) static 클래스 타입 변수가 선언되어야 한다.
    3) static 클래스 메서드로 객체를 반환해야 한다.

15. 변수가 있으면 -> 변수의 값을 읽고 쓸 수 있도록 getter/setter를 붙인다.

16. 
    a = 5;

    b = a++;    -> a = 6, b = 5
    b = ++a;    -> a = 6, b = 6

17. static
    1) 공유 목적 -> 객체를 만들지 않고 사용 가능하다. (큰 장점임)
    2) static 변수
    3) static 함수 -> this 사용불가
       생성자에서 초기화하면 안된다.
    4) static 변수 초기화 블럭이 있다.

18. 네트워크 통신

    서버                                                    클라이언트

    서버 소켓           <----------------------------
                        ---------------------------->
    클라이언트 소켓                                         클라이언트 소켓    

    1) 서버 소켓을 만들어서 요청을 기다림.                   1)클라이언트 소켓을 만들어서 서버로 접속요청을 함
    2) 서버 소켓이 요청을 받아들여서
       새로 클라이언트 소켓을 만들고
       클라이언트로부터받은 연결을 넘겨줌.
       클라이언트 소켓끼리 데이터를 주고 받음.
       스트림 객체로 전환시켜서 데이터를 주고 받음.

    소켓 : 통신에 필요한 네트워크 라이브러리

19. 예외처리 (try - catch - finally)

    try{

    } catch(Exception e){

    } finally{

    }
